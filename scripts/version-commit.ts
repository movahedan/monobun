#!/usr/bin/env bun

import { $ } from "bun";
import { colorify } from "./shell/colorify";
import { createScript, type ScriptConfig, validators } from "./shell/create-scripts";

const scriptConfig = {
	name: "Version Commit",
	description: "Commit version changes with proper commit message",
	usage: "bun run version-commit.ts [options]",
	examples: [
		"bun run version-commit.ts",
		"bun run version-commit.ts --message 'Custom commit message'",
		"bun run version-commit.ts --dry-run",
	],
	options: [
		{
			short: "-m",
			long: "--message",
			description: "Custom commit message",
			required: false,
			validator: validators.nonEmpty,
		},
		{
			short: "-a",
			long: "--add-all",
			description: "Add all changes before committing",
			required: false,
			defaultValue: true,
			validator: validators.boolean,
		},
	],
} as const satisfies ScriptConfig;

export const versionCommit = createScript(scriptConfig, async function main(args, xConsole) {
	xConsole.info("üíæ Committing version changes...");

	if (args["add-all"]) {
		xConsole.log("üìÅ Adding all changes...");
		if (!args["dry-run"]) {
			await $`git add .`;
		}
	}
	const statusResult = await $`git status --porcelain`.nothrow();
	const hasChanges = statusResult.text().trim() !== "";

	if (!hasChanges) {
		xConsole.log(colorify.yellow("‚ö†Ô∏è No changes to commit"));
		return;
	}
	const packageJson = await Bun.file("package.json").json();
	const version = packageJson.version;
	const defaultMessage = `release: ${version}

- Automated version bump
- Updated changelogs
- Generated by version management system`;

	const commitMessage = args.message || defaultMessage;

	xConsole.log("üìù Commit message:");
	xConsole.log(commitMessage);

	if (args["dry-run"]) {
		xConsole.log(colorify.yellow("\nüîç Dry run: Would commit the above changes"));
		return;
	}
	await $`git commit -m "${commitMessage}"`;

	xConsole.log(colorify.green(`‚úÖ Successfully committed version ${version} changes`));
	const commitHash = await $`git rev-parse --short HEAD`.text();
	xConsole.log(`üè∑Ô∏è Commit hash: ${commitHash.trim()}`);
});

if (import.meta.main) {
	versionCommit();
}
