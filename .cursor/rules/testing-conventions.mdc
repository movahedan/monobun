---
description: Follow consistent testing conventions
globs: ["**/*.test.ts", "**/*.test.tsx", "**/*.spec.ts", "**/*.spec.tsx"]
alwaysApply: true
---

Follow consistent testing conventions for reliable test suites.

## Test Structure

```ts
// Use descriptive test names and proper structure
describe('UserService', () => {
  describe('getUser', () => {
    it('should return user when valid ID is provided', async () => {
      // Arrange
      const userId = 1;
      const expectedUser = { id: 1, name: 'John' };
      
      // Act
      const result = await userService.getUser(userId);
      
      // Assert
      expect(result).toEqual(expectedUser);
    });
    
    it('should throw error when invalid ID is provided', async () => {
      // Arrange
      const invalidId = -1;
      
      // Act & Assert
      await expect(userService.getUser(invalidId)).rejects.toThrow();
    });
  });
});
```

## Testing Utilities

```ts
// Create reusable test utilities
export const createMockUser = (overrides: Partial<User> = {}): User => ({
  id: 1,
  name: 'Test User',
  email: 'test@example.com',
  createdAt: new Date(),
  ...overrides
});

export const createMockApiResponse = <T>(data: T): ApiResponse<T> => ({
  data,
  status: 200,
  message: 'Success'
});

export const createMockError = (message: string): Error => new Error(message);
```

## Component Testing

```tsx
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { UserCard } from './UserCard';

describe('UserCard', () => {
  it('should display user information', () => {
    const user = createMockUser({ name: 'John Doe' });
    const onEdit = jest.fn();
    
    render(<UserCard user={user} onEdit={onEdit} />);
    
    expect(screen.getByText('John Doe')).toBeInTheDocument();
    expect(screen.getByText(user.email)).toBeInTheDocument();
  });
  
  it('should call onEdit when edit button is clicked', async () => {
    const user = createMockUser();
    const onEdit = jest.fn();
    
    render(<UserCard user={user} onEdit={onEdit} />);
    
    fireEvent.click(screen.getByText('Edit'));
    
    await waitFor(() => {
      expect(onEdit).toHaveBeenCalledWith(user);
    });
  });
});
```

## Hook Testing

```tsx
import { renderHook, waitFor } from '@testing-library/react';
import { useUser } from './useUser';

describe('useUser', () => {
  it('should fetch user data', async () => {
    const mockUser = createMockUser();
    jest.spyOn(api, 'getUser').mockResolvedValue(mockUser);
    
    const { result } = renderHook(() => useUser({ userId: 1 }));
    
    expect(result.current.loading).toBe(true);
    
    await waitFor(() => {
      expect(result.current.user).toEqual(mockUser);
      expect(result.current.loading).toBe(false);
    });
  });
});
```

## Test Organization

```ts
// Group related tests together
describe('UserService', () => {
  describe('authentication', () => {
    describe('login', () => {
      it('should authenticate valid credentials', () => {});
      it('should reject invalid credentials', () => {});
    });
    
    describe('logout', () => {
      it('should clear user session', () => {});
    });
  });
  
  describe('user management', () => {
    describe('createUser', () => {
      it('should create new user', () => {});
      it('should validate user data', () => {});
    });
    
    describe('updateUser', () => {
      it('should update existing user', () => {});
    });
  });
});
```
