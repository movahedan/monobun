---
description: Follow consistent error handling patterns
globs: ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx"]
alwaysApply: true
---

Follow consistent error handling patterns for robust applications.

## Try-Catch Patterns

```ts
// Use try-catch for async operations
const handleSubmit = async (data: FormData) => {
  try {
    setLoading(true);
    const result = await api.submit(data);
    onSuccess(result);
  } catch (error) {
    console.error('Submit failed:', error);
    onError(error as Error);
  } finally {
    setLoading(false);
  }
};
```

## Error Boundaries

```tsx
// Use error boundaries for React components
class ErrorBoundary extends React.Component<
  { children: React.ReactNode },
  { hasError: boolean }
> {
  constructor(props: { children: React.ReactNode }) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(): { hasError: boolean } {
    return { hasError: true };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('Error caught by boundary:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return <div>Something went wrong.</div>;
    }

    return this.props.children;
  }
}
```

## Custom Error Types

```ts
// Define custom error types for better error handling
class ValidationError extends Error {
  constructor(message: string, public field: string) {
    super(message);
    this.name = 'ValidationError';
  }
}

class ApiError extends Error {
  constructor(message: string, public statusCode: number) {
    super(message);
    this.name = 'ApiError';
  }
}

// Use custom errors
const validateUser = (user: User) => {
  if (!user.email) {
    throw new ValidationError('Email is required', 'email');
  }
  if (!user.name) {
    throw new ValidationError('Name is required', 'name');
  }
};
```
