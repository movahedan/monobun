---
description: Follow security best practices
globs: ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx"]
alwaysApply: true
---

Follow security best practices to protect applications and users.

## Input Validation

```ts
// Always validate user input
const validateEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

const validatePassword = (password: string): boolean => {
  // At least 8 characters, 1 uppercase, 1 lowercase, 1 number
  const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d@$!%*?&]{8,}$/;
  return passwordRegex.test(password);
};

const handleSubmit = (data: FormData) => {
  if (!validateEmail(data.email)) {
    throw new Error('Invalid email format');
  }
  if (!validatePassword(data.password)) {
    throw new Error('Password does not meet requirements');
  }
  // Process data
};
```

## Environment Variables

```ts
// Use environment variables for sensitive data
const API_KEY = process.env.API_KEY;
const DATABASE_URL = process.env.DATABASE_URL;

// Validate required environment variables
if (!API_KEY) {
  throw new Error('API_KEY is required');
}

if (!DATABASE_URL) {
  throw new Error('DATABASE_URL is required');
}
```

## Input Sanitization

```ts
// Sanitize user input to prevent XSS
const sanitizeHtml = (html: string): string => {
  return html
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#x27;');
};

const displayUserContent = (content: string) => {
  const sanitized = sanitizeHtml(content);
  return <div dangerouslySetInnerHTML={{ __html: sanitized }} />;
};
```

## Authentication

```ts
// Use JWT tokens for authentication
const authenticate = async (token: string) => {
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    return decoded;
  } catch (error) {
    throw new Error('Invalid token');
  }
};

// Implement token refresh
const refreshToken = async (refreshToken: string) => {
  try {
    const response = await api.post('/auth/refresh', { refreshToken });
    return response.data.accessToken;
  } catch (error) {
    throw new Error('Token refresh failed');
  }
};
```

## Rate Limiting

```ts
// Implement rate limiting
const rateLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100 // limit each IP to 100 requests per windowMs
});

app.use('/api/', rateLimiter);
```

## CORS Configuration

```ts
// Configure CORS properly
app.use(cors({
  origin: process.env.ALLOWED_ORIGINS?.split(',') || ['http://localhost:3000'],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));
```

## SQL Injection Prevention

```ts
// Use parameterized queries
const getUserById = async (id: number) => {
  const query = 'SELECT * FROM users WHERE id = ?';
  const result = await db.execute(query, [id]);
  return result[0];
};

// Avoid string concatenation
// ❌ Bad - vulnerable to SQL injection
const badQuery = `SELECT * FROM users WHERE id = ${userId}`;

// ✅ Good - parameterized query
const goodQuery = 'SELECT * FROM users WHERE id = ?';
```
