---
description: Follow package development standards
globs: ["packages/**/*.ts", "packages/**/*.tsx", "packages/**/*.json"]
alwaysApply: true
---

Follow consistent package development standards for shared packages.

## Package Structure

```ts
// packages/ui/src/index.ts
export { Button } from './components/Button';
export { Card } from './components/Card';
export type { ButtonProps } from './components/Button';

// packages/ui/package.json
{
  "name": "@repo/ui",
  "version": "0.0.0",
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "import": "./dist/index.js",
      "require": "./dist/index.js"
    }
  }
}
```

## API Design

```ts
// Design clear, stable APIs
export interface ButtonProps {
  variant?: 'primary' | 'secondary' | 'danger';
  size?: 'small' | 'medium' | 'large';
  disabled?: boolean;
  onClick?: () => void;
  children: React.ReactNode;
}

// Provide sensible defaults
export const Button: React.FC<ButtonProps> = ({
  variant = 'primary',
  size = 'medium',
  disabled = false,
  onClick,
  children
}) => {
  // Implementation
};
```

## Type Exports

```ts
// Export types for consumers
export type { ButtonProps } from './Button';
export type { CardProps } from './Card';
export type { Theme } from './theme';

// Export utility types
export type { ComponentProps } from './types';
export type { ThemeConfig } from './theme/types';
```

## Documentation

```ts
/**
 * Button component for user interactions
 * 
 * @example
 * ```tsx
 * <Button variant="primary" onClick={handleClick}>
 *   Click me
 * </Button>
 * ```
 */
export const Button: React.FC<ButtonProps> = ({ ... }) => {
  // Implementation
};
```

## Version Management

```ts
// Use semantic versioning
// MAJOR.MINOR.PATCH
// 1.0.0 - Initial release
// 1.1.0 - New features, backward compatible
// 1.1.1 - Bug fixes, backward compatible
// 2.0.0 - Breaking changes

// Update version in package.json
{
  "version": "1.1.0",
  "peerDependencies": {
    "react": ">=16.8.0",
    "react-dom": ">=16.8.0"
  }
}
```

## Testing Packages

```ts
// Test packages independently
describe('Button Component', () => {
  it('should render with default props', () => {
    render(<Button>Click me</Button>);
    expect(screen.getByText('Click me')).toBeInTheDocument();
  });

  it('should handle click events', () => {
    const onClick = jest.fn();
    render(<Button onClick={onClick}>Click me</Button>);
    
    fireEvent.click(screen.getByText('Click me'));
    expect(onClick).toHaveBeenCalled();
  });
});
```

## Build Configuration

```ts
// Configure build tools for packages
// packages/ui/tsconfig.json
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "./dist",
    "declaration": true,
    "declarationMap": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist", "**/*.test.ts", "**/*.test.tsx"]
}
```
