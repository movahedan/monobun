---
description: Complete interactive commit workflow with documentation updates, branch management, and PR creation
alwaysApply: false
---
# Commit and Documentation Workflow

## 🎯 Complete Interactive Workflow Process

When handling commits and changes, follow this comprehensive **interactive workflow** that guides through the entire process:

### 1. 📋 Pre-Commit Analysis

**ALWAYS start by reading the staged and changed diffs:**

```bash
# Check staged changes
git diff --cached

# Check unstaged changes  
git diff

# Check all changes (staged + unstaged)
git diff HEAD
```

**Analyze the changes to understand:**
- What files were modified
- What functionality was added/changed/fixed
- Impact on existing features
- Breaking changes or new dependencies

**Ask the developer:**
> "I can see the following changes in your working directory:
> - [List specific files and changes]
> - [List any new dependencies or breaking changes]
> 
> Should I proceed with committing these changes?"

### 2. 📚 Documentation Review & Updates

**For each change, identify:**
- Related documentation files (follow the comprehensive standards defined in the [Documentation Rules](./documentation.mdc))

**Present findings to the developer:**
> "I found these documentation files that might need updates based on your changes:
> - `docs/feature-guide.md` (mentions the API you modified)
> - `docs/setup.md` (references the config you changed)
> - `docs/3_DEV_FLOWS.md` (workflow affected by your changes)
> 
> Would you like me to update the documentation to reflect these changes?"

**If yes, proceed with documentation updates:**
> "I'll update the documentation now. This may take a moment..."

**Documentation Update Process:**
> **Note**: When updating documentation, follow the comprehensive standards defined in the [Documentation Rules](./documentation.mdc). This includes:
> - Using the three-tier documentation structure (CLAUDE.md, Cursor Rules, Developer Docs)
> - Following the documentation standards and file naming conventions
> - Maintaining proper document structure with emojis, table of contents, and cross-references
> - Ensuring technical accuracy and complete examples
> - Updating related documentation for consistency

**Confirm with the developer:**
> "Documentation has been updated following our documentation standards. The following files were modified:
> - [List of updated documentation files]
> 
> Should I proceed with committing the changes?"

### 3. 📝 Commit Message Creation

**Follow the InterShell conventional commit types from `packages/intershell/src/entities/config/default.ts`:**

Available commit types, decide according to the changes being commit.
- `feat` 🚀 - New features
- `fix` 🐛 - Bug fixes  
- `docs` 📚 - Documentation changes
- `style` 🎨 - Code formatting (no logic changes)
- `refactor` 🔧 - Code refactoring
- `perf` ⚡ - Performance improvements
- `test` 🧪 - Testing changes
- `ci` 👷 - CI/CD changes
- `chore` 🔨 - Maintenance tasks
- `deps` 📦 - Dependency updates
- `revert` ⏪ - Revert commits
- `merge` 🔀 - Merge commits

**Commit message rules:**
- Use lowercase for type, scope, and subject
- Keep subject concise but descriptive (max 72 chars)
- Format: `type(scopes): descriptive subject`
- If the scope (or scopes) is a package name, it should be prefixed by `@repo/<package-name>`
- Scope: can be an array, separator: ",", examples:
  - `type: descriptive subject`,
  - `type(root): descriptive subject`,
  - `type(app-name): descriptive subject`,
  - `type(app-name,app-name-2): descriptive subject`,
  - `type(app-name,@repo/package-name): descriptive subject`,

**Body Guidelines:**

For complex changes, include a detailed body explaining:
- What was changed
- Why it was changed
- Any breaking changes
- Migration steps if needed
- Testing performed

Example:
```
fix(root): resolve docker dependency issues in github actions

- Add automatic dependency resolution by parsing docker-compose.yml
- Include required services when affected packages have dependencies
- Prevent 'No such image' errors when services depend on prod-api
- Add yaml package for parsing docker-compose.yml file

This fixes the intermittent Docker image errors in CI by automatically
including service dependencies based on the actual docker-compose.yml
configuration.
```

**Ask the developer for commit details:**
> "Based on the changes I see, I suggest this commit message:
> ```
> type(scope): descriptive subject

body description lines

(optional) BREAKING CHANGE: (applicable if the interface of the module has been changed - rare case in repo - also can be determined with "!" before ":" in first line)
> ```
> 
> Would you like me to use this, or would you prefer a different message?"

### 4. 🚀 Push Changes

**After committing, ask the developer:**
> "Changes have been committed successfully. Would you like me to push the changes to the remote repository?"

**If yes, push the changes:**
```bash
git push origin main
# or
git push origin feature-branch
```

**Confirm the push:**
> "Changes have been pushed successfully to [branch name]."

### 5. 🔗 Pull Request Creation

**After pushing, ask about pull request:**
> "Changes have been pushed successfully. Would you like me to create a pull request on GitHub?"

**If yes, create pull request using GitHub CLI:**

**Interactive mode (recommended):**
```bash
gh pr create
```

**Or with specific flags:**
```bash
# Basic PR with title and body
gh pr create --title "Scope: A short title containing the most important keynotes" --body "Adds new reusable button component with variants"

# Auto-fill from commit messages
gh pr create --fill

# Add reviewers
gh pr create --reviewer username1,username2

# Add labels
gh pr create --label "enhancement" --label "ui"

# Create as draft
gh pr create --draft

# Specify base branch
gh pr create --base develop

# Use template
gh pr create --template "pull_request_template.md"
```

**Common PR creation patterns:**
```bash
# Feature PR
gh pr create --title "Scope: A short title containing the most important keynotes" --body "Summary Report" --label "enhancement"

# Bug fix PR  
gh pr create --title "fix(scope): A short title containing the most important keynotes" --body "Fixes issue #123" --label "bug"

# Documentation PR
gh pr create --title "docs(repo): A short title containing the most important keynotes" --body "Summary Report" --label "documentation"
```

## 📝 PR Description Guidelines

**ALWAYS create concise PR descriptions (max 1500 characters):**

### ✅ **Simplified PR Description Structure:**
```
#### 📊 Summary
Brief description of what this PR accomplishes (1-2 sentences)

- Key changes made (3-5 bullet points max)
- Focus on user-facing improvements
```

### ❌ **Avoid in PR Descriptions:**
- Detailed technical implementation
- Extensive file-by-file breakdowns
- Verbose explanations of obvious changes

**Provide the GitHub PR link:**
> "Pull request created successfully! You can view it here: [PR Link]"

### 6. 📊 Summary Report

**After completing the workflow, provide a comprehensive summary:**

```
## 📋 Commit Summary

**Changes Committed:**
- [List of key changes made]

**Documentation Updated:**
- [List of docs files updated, if any]

**Files Modified:**
- [List of main files changed]

**Commit Message Used:**
- [Exact commit message]

**Pull Request Created:**
- [PR link if created]

**Next Steps:**
- [Link to PR if created]
- [Any follow-up actions needed]
- [Reminders about review process]
```

**Ask for confirmation:**
> "The complete workflow has been finished. Is there anything else you'd like me to help you with?"

## 🚨 Critical Rules

1. **ALWAYS read diffs before committing**
2. **ALWAYS check for documentation updates**
3. **ALWAYS use lowercase in commit messages**
4. **ALWAYS ask before pushing**
5. **ALWAYS ask before creating PR**
6. **ALWAYS provide PR link if created**
7. **ALWAYS guide through the complete process interactively**
8. **ALWAYS provide a comprehensive summary at the end**

## 📝 Interactive Workflow Checklist

- [ ] Read staged and unstaged diffs
- [ ] Analyze changes and impact
- [ ] Ask developer about proceeding
- [ ] Check for documentation updates needed
- [ ] Ask developer about doc updates
- [ ] Update documentation if requested
- [ ] Commit documentation changes if made
- [ ] Create appropriate commit message
- [ ] Ask developer about commit message
- [ ] Commit main changes with proper message
- [ ] Ask about pushing changes
- [ ] Push if approved
- [ ] Ask about creating pull request
- [ ] Create PR if approved
- [ ] Provide PR link
- [ ] Give comprehensive summary report
- [ ] Ask if anything else is needed

## 🎯 Best Practices

- **Be thorough** in analyzing changes
- **Be descriptive** in commit messages
- **Be proactive** about documentation (following [Documentation Rules](./documentation.mdc))
- **Be communicative** with the developer
- **Be helpful** by providing clear next steps
- **Be accurate** in reporting what was done
- **Be interactive** throughout the entire process
- **Be comprehensive** in the final summary
