---
description: Follow consistent React component structure
globs: ["**/*.tsx", "**/*.jsx"]
alwaysApply: true
---

Follow consistent React component structure and patterns.

## Functional Components

```tsx
// Use functional components with hooks
interface UserCardProps {
  user: User;
  onEdit: (user: User) => void;
  onDelete: (userId: number) => void;
}

export const UserCard: React.FC<UserCardProps> = ({ 
  user, 
  onEdit, 
  onDelete 
}) => {
  const [isLoading, setIsLoading] = useState(false);

  const handleEdit = async () => {
    setIsLoading(true);
    try {
      await onEdit(user);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="user-card">
      <h3>{user.name}</h3>
      <p>{user.email}</p>
      <div className="actions">
        <button onClick={handleEdit} disabled={isLoading}>
          {isLoading ? 'Editing...' : 'Edit'}
        </button>
        <button onClick={() => onDelete(user.id)}>
          Delete
        </button>
      </div>
    </div>
  );
};
```

## Custom Hooks

```tsx
// Use custom hooks for reusable logic
interface UseUserOptions {
  userId: number;
  enabled?: boolean;
}

export const useUser = ({ userId, enabled = true }: UseUserOptions) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<Error | null>(null);

  const fetchUser = async () => {
    setLoading(true);
    setError(null);
    try {
      const data = await api.getUser(userId);
      setUser(data);
    } catch (err) {
      setError(err as Error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (enabled) {
      fetchUser();
    }
  }, [userId, enabled]);

  return { user, loading, error, refetch: fetchUser };
};
```

## Import Organization

```tsx
// 1. React imports
import React from 'react';
import { useState, useEffect } from 'react';

// 2. Third-party imports
import axios from 'axios';
import { useQuery } from '@tanstack/react-query';

// 3. Local imports (absolute paths first)
import { User } from '@/types';
import { useAuth } from '@/hooks';

// 4. Relative imports
import { Button } from './Button';
import { styles } from './styles.module.css';
```

## Export Organization

```tsx
// 1. Type exports
export type { User, UserRole } from './types';

// 2. Component exports
export { UserCard } from './UserCard';
export { UserList } from './UserList';

// 3. Hook exports
export { useUser } from './hooks/useUser';
export { useAuth } from './hooks/useAuth';

// 4. Utility exports
export { formatUser } from './utils/formatUser';
```
