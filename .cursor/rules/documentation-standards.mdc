---
description: When writing documentation, follow these comprehensive standards based on the project's established patterns
globs: ["**/*.md"]
alwaysApply: true
---

# Documentation Standards

When writing documentation, follow these comprehensive standards based on the project's established patterns:

## Structure and Organization

### File Naming and Organization
- Use numbered prefixes for ordered documentation (e.g., `1_DOCKER.md`, `2_DEVCONTAINER.md`)
- Group related documentation in the `docs/` folder
- Use descriptive, action-oriented names that indicate the content

### Document Structure
Always include these sections in order:
1. **Title with emoji** - Clear, descriptive title with relevant emoji
2. **Brief description** - One-line summary of what the document covers
3. **Table of Contents** - Comprehensive navigation with anchor links
4. **Overview section** - High-level explanation of the topic
5. **Detailed sections** - Main content organized logically
6. **Examples and code blocks** - Practical implementations
7. **Related links** - Cross-references to other documentation

## Content Standards

### Headers and Navigation
- Use emojis in main section headers for visual hierarchy
- Include a comprehensive table of contents with anchor links
- Use consistent header levels (H1 for title, H2 for main sections, H3 for subsections)
- Make headers descriptive and action-oriented

### Code Examples
- Provide complete, runnable code examples
- Include both simple and complex use cases
- Show before/after comparisons when demonstrating improvements
- Use TypeScript for all code examples unless specifically demonstrating other languages
- Include error handling and edge cases in examples

### Technical Writing
- Write in clear, concise language
- Use active voice and present tense
- Include step-by-step instructions for complex processes
- Provide context for why certain approaches are recommended
- Include troubleshooting sections for common issues

## Formatting Standards

### Markdown Structure
```markdown
# 🎯 Document Title

> Brief description of what this document covers

## 📋 Table of Contents

- [Overview](#-overview)
- [Key Features](#-key-features)
- [Usage Examples](#-usage-examples)
- [Advanced Topics](#-advanced-topics)

## 🎯 Overview

Clear explanation of the topic with context and purpose.

## 🔧 Key Features

- **Feature 1**: Description with benefits
- **Feature 2**: Description with benefits
- **Feature 3**: Description with benefits

## 📝 Usage Examples

### Basic Usage
```typescript
// Complete, runnable example
const example = () => {
  // Implementation
};
```

### Advanced Usage
```typescript
// More complex example with error handling
const advancedExample = async () => {
  try {
    // Implementation
  } catch (error) {
    // Error handling
  }
};
```

## 🔗 Related Documentation

- [Related Doc 1](./related-doc-1.md)
- [Related Doc 2](./related-doc-2.md)
```

### Visual Elements
- Use emojis consistently for section headers
- Include badges for tools and technologies mentioned
- Use code blocks with appropriate syntax highlighting
- Include diagrams or screenshots when helpful
- Use blockquotes for important notes and warnings

## Content Guidelines

### Technical Accuracy
- Verify all code examples work as written
- Include version information for tools and libraries
- Provide complete command examples with proper syntax
- Include error messages and their solutions
- Update documentation when APIs or processes change

### Completeness
- Cover all major use cases and scenarios
- Include troubleshooting sections
- Provide migration guides for breaking changes
- Include performance considerations where relevant
- Document security implications when applicable

### Accessibility
- Use clear, descriptive link text
- Provide alternative text for images
- Use semantic HTML structure in markdown
- Ensure code examples are readable and well-formatted

## Maintenance Standards

### Regular Updates
- Review and update documentation with each major release
- Remove outdated information promptly
- Add new sections as features are added
- Keep examples current with latest APIs

### Cross-References
- Link to related documentation
- Reference specific line numbers in code examples when helpful
- Include links to external resources and official documentation
- Maintain consistent terminology across all documents

### Version Control
- Include version information in documentation headers
- Document breaking changes clearly
- Provide migration guides for major version updates
- Keep changelog information current

## Quality Checklist

Before publishing documentation, ensure:
- [ ] All code examples are tested and working
- [ ] Table of contents is complete and accurate
- [ ] Links are valid and working
- [ ] Grammar and spelling are correct
- [ ] Technical accuracy is verified
- [ ] Examples cover all major use cases
- [ ] Troubleshooting section is included
- [ ] Related documentation is cross-referenced
- [ ] Version information is current
- [ ] Security implications are documented where relevant
