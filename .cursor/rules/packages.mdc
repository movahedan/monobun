---
description: Package management and library installation best practices
globs: ["package.json", "**/*.json"]
alwaysApply: true
---

# 📦 Package Management & Library Installation

Best practices for managing dependencies and installing libraries in modern JavaScript/TypeScript projects.

## 🚨 Critical Rule: Always Install Latest Versions

When installing libraries, do not rely on your own training data or manually specify versions.

Your training data has a cut-off date, which means you're probably not aware of all the latest developments in the JavaScript and TypeScript ecosystem.

**Instead of manually updating `package.json`**, always use package manager commands to install the latest version of a library.

## 📥 Installation Commands

### Bun (Recommended for this project)
```bash
# Production dependencies
bun add react
bun add @tanstack/react-query
bun add axios

# Development dependencies
bun add -D @biomejs/biome
bun add -D typescript
bun add -D @types/node

# Global packages
bun add -g typescript
```

### NPM
```bash
# Production dependencies
npm install react
npm install @tanstack/react-query

# Development dependencies
npm install --save-dev @biomejs/biome
npm install --save-dev typescript
npm install --save-dev @types/node

# Global packages
npm install -g typescript
```

### Yarn
```bash
# Production dependencies
yarn add react
yarn add @tanstack/react-query

# Development dependencies
yarn add -D @biomejs/biome
yarn add -D typescript
yarn add -D @types/node

# Global packages
yarn global add typescript
```

### PNPM
```bash
# Production dependencies
pnpm add react
pnpm add @tanstack/react-query

# Development dependencies
pnpm add -D @biomejs/biome
pnpm add -D typescript
pnpm add -D @types/node

# Global packages
pnpm add -g typescript
```

## 🎯 Best Practices

### 1. Use Specific Installation Commands
```bash
# ✅ Good - installs latest version
bun add lodash

# ❌ Bad - manually editing package.json
{
  "dependencies": {
    "lodash": "^4.17.21"  // Version might be outdated
  }
}
```

### 2. Specify Development vs Production Dependencies
```bash
# ✅ Good - development tools
bun add -D @types/react
bun add -D eslint
bun add -D prettier
bun add -D vitest

# ✅ Good - production dependencies
bun add react
bun add react-dom
bun add express
```

### 3. Keep Dependencies Updated
```bash
# Check for outdated packages
npm outdated
yarn outdated  
pnpm outdated
bun update

# Update all dependencies
npm update
yarn upgrade
pnpm update
bun update

# Update specific package
bun add package-name@latest
```

### 4. Use TypeScript Types When Available
```bash
# Install types for JavaScript libraries
bun add -D @types/node
bun add -D @types/express
bun add -D @types/lodash
bun add -D @types/react
bun add -D @types/react-dom
```

## 📋 Common Package Categories

### **UI & Styling**
```bash
# React UI libraries
bun add @radix-ui/react-dialog
bun add @headlessui/react
bun add react-hook-form

# Styling
bun add tailwindcss
bun add clsx
bun add class-variance-authority
```

### **State Management**
```bash
# Data fetching
bun add @tanstack/react-query
bun add swr

# State management
bun add zustand
bun add @reduxjs/toolkit
bun add react-redux
```

### **Utilities**
```bash
# Utility libraries
bun add lodash
bun add date-fns
bun add zod

# Development utilities
bun add -D @types/lodash
```

### **Testing**
```bash
# Testing frameworks
bun add -D vitest
bun add -D @testing-library/react
bun add -D @testing-library/jest-dom
bun add -D @testing-library/user-event

# Types for testing
bun add -D @types/jest
```

### **Build Tools**
```bash
# Development tools
bun add -D @biomejs/biome
bun add -D typescript
bun add -D vite
bun add -D turbo

# Bundlers
bun add -D webpack
bun add -D rollup
bun add -D esbuild
```

## ⚡ Monorepo Considerations

In this Turborepo monorepo, be aware of:

### 1. Workspace Dependencies
```bash
# Install to specific workspace
bun add react --filter=@repo/ui
bun add -D typescript --filter=packages/utils

# Install to root workspace
bun add -D turbo --filter=root
```

### 2. Shared Dependencies
```bash
# Dependencies used across multiple packages should be in root
bun add -D typescript  # Root level for all packages
bun add -D @biomejs/biome  # Shared linting tool
```

### 3. Package-Specific Dependencies
```bash
# Package-specific dependencies
bun add react --filter=@repo/ui  # Only for UI package
bun add express --filter=apps/api  # Only for API app
```

## 🔍 Verification Steps

After installing packages:

1. **Check package.json** - Verify the package was added with latest version
2. **Check lock file** - Ensure lock file (bun.lockb) is updated
3. **Test installation** - Import and use the package to verify it works
4. **Run type check** - Ensure TypeScript types are working

```bash
# Verify installation
bun run check:types
bun test
bun run build
```

## 📝 Documentation

When adding new dependencies:

1. **Document why** - Add comments in package.json if needed
2. **Update README** - If it's a major dependency
3. **Team communication** - Notify team of new major dependencies

```json
{
  "dependencies": {
    "zod": "^3.22.4"  // Schema validation for API requests
  },
  "devDependencies": {
    "@storybook/react": "^7.5.3"  // Component documentation
  }
}
```

---

**Remember**: This ensures you're always using the latest version with the newest features, security patches, and bug fixes. The package manager will handle version resolution and compatibility.