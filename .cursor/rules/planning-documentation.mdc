# üìã Planning Documentation Standards

Create effective planning documentation that clearly defines current vs desired states, provides actionable steps, includes testing phases, and estimates time and scope.

## üö® IMPORTANT: Planning Process

**Planning should NEVER be done in isolation! Follow this process:**

1. **Research Phase**: Use web search to investigate the feature request thoroughly
2. **Collaboration Phase**: Have back-and-forth discussions with the prompter to clarify requirements
3. **Writing Phase**: Only after research and collaboration, write the planning document

**This ensures the planning is based on real research and user needs, not assumptions.**

## üéØ Core Planning Structure

### **MANDATORY: Always Include These Sections**

1. **Research & Investigation** - Web search and feature analysis
2. **Current State Analysis** - What exists now (mention current documents in the /docs)
3. **Desired State Definition** - What we want to achieve
4. **Actionable Steps Breakdown** - Specific, manageable tasks
5. **Testing & Validation Phase** - How to verify success
6. **Time & Size Estimates** - Realistic timeframes and scope
7. **Success Criteria** - Clear metrics for completion

## üìù Planning Document Template

```markdown
# üéØ [Feature/Project Name] Planning Document

> Brief description of what this planning document covers

## üìã Table of Contents

- [Research & Investigation](#-research--investigation)
- [Current State](#-current-state)
- [Desired State](#-desired-state)
- [Action Plan](#-action-plan)
- [Testing & Validation](#-testing--validation)
- [Time & Size Estimates](#-time--size-estimates)
- [Success Criteria](#-success-criteria)
- [Risk Assessment](#-risk-assessment)
- [Related Documentation](#-related-documentation)

## üîç Research & Investigation

**Web Search & Feature Analysis:**
- [Research findings from web search]
- [Similar implementations in other projects]
- [Best practices and industry standards]
- [Technical requirements and constraints]
- [Potential challenges and solutions]

**Feature Request Analysis:**
- [User needs and requirements]
- [Business value and impact]
- [Technical feasibility assessment]
- [Alternative approaches considered]

## üîç Current State

**What exists now:**
- [List current features, systems, or limitations]
- [Describe existing pain points or gaps]
- [Document current technical debt or constraints]

**Current limitations:**
- [Specific issues that need addressing]
- [Performance or scalability concerns]
- [User experience problems]

## üéØ Desired State

**What we want to achieve:**
- [Clear vision of the end result]
- [Specific improvements or new capabilities]
- [Expected user experience improvements]
- [Technical architecture goals]

**Success indicators:**
- [Measurable outcomes]
- [User satisfaction metrics]
- [Performance benchmarks]
- [Business value metrics]

## üöÄ Action Plan

### Phase 1: Foundation
- [ ] **Task 1.1**: [Specific, actionable description]
  - **Dependencies**: [What needs to be done first]
  - **Deliverable**: [What will be produced]

- [ ] **Task 1.2**: [Specific, actionable description]
  - **Dependencies**: [What needs to be done first]
  - **Deliverable**: [What will be produced]

### Phase 2: Implementation
- [ ] **Task 2.1**: [Specific, actionable description]
  - **Dependencies**: [What needs to be done first]
  - **Deliverable**: [What will be produced]

### Phase 3: Testing & Refinement
- [ ] **Task 3.1**: [Specific, actionable description]
  - **Dependencies**: [What needs to be done first]
  - **Deliverable**: [What will be produced]

## üß™ Testing & Validation

### **Testing Strategy**
- **Unit Testing**: [What components will be unit tested]
- **Integration Testing**: [How components will work together]
- **User Acceptance Testing**: [How end users will validate]
- **Performance Testing**: [Load and stress testing approach]

## ‚è±Ô∏è Time & Size Estimates

### **Overall Timeline**
- **Total Duration**: [X weeks/months]
- **Start Date**: [Specific date]
- **Target Completion**: [Specific date]
- **Buffer Time**: [X weeks for unexpected issues]

### **Phase Breakdown**
- **Phase 1 (Foundation)**: [X weeks] - [Small/Medium/Large]
- **Phase 2 (Implementation)**: [X weeks] - [Small/Medium/Large]
- **Phase 3 (Testing)**: [X weeks] - [Small/Medium/Large]

### **Size Classification**
- **Small**: 1-2 weeks, minimal complexity
- **Medium**: 3-6 weeks, moderate complexity
- **Large**: 7+ weeks, high complexity

## ‚úÖ Success Criteria

### **Must Have (Critical)**
- [ ] [Specific, measurable outcome]
- [ ] [Specific, measurable outcome]
- [ ] [Specific, measurable outcome]

### **Should Have (Important)**
- [ ] [Specific, measurable outcome]
- [ ] [Specific, measurable outcome]

### **Could Have (Nice to Have)**
- [ ] [Specific, measurable outcome]
- [ ] [Specific, measurable outcome]

## ‚ö†Ô∏è Risk Assessment

### **High Risk Items**
- **Risk**: [Description of potential issue]
  - **Impact**: [What happens if it occurs]
  - **Mitigation**: [How to prevent or handle it]
  - **Contingency**: [Backup plan if it happens]

### **Medium Risk Items**
- **Risk**: [Description of potential issue]
  - **Impact**: [What happens if it occurs]
  - **Mitigation**: [How to prevent or handle it]

### **Low Risk Items**
- **Risk**: [Description of potential issue]
  - **Impact**: [What happens if it occurs]
  - **Mitigation**: [How to prevent or handle it]

## üîó Related Documentation

- [Related Planning Doc 1](./related-planning-1.md)
- [Technical Architecture](./technical-architecture.md)
- [User Stories](./user-stories.md)
- [API Documentation](./api-docs.md)
```

## üéØ Best Practices

### **1. State Comparison Clarity**
- **Current State**: Be specific about what exists now
- **Desired State**: Paint a clear picture of the end goal
- **Gap Analysis**: Explicitly identify what needs to change

### **2. Actionable Steps**
- Use action verbs (Implement, Create, Test, Deploy)
- Assign clear ownership for each task
- Identify dependencies between tasks
- Provide specific deliverables for each step

### **3. Testing & Validation**
- Define clear success criteria
- Include multiple testing approaches
- Set realistic testing timelines
- Plan for iterative improvement

### **4. Time & Size Estimation**
- Break down into manageable phases
- Include buffer time for unexpected issues
- Use consistent size classifications
- Be realistic about complexity

### **5. Risk Management**
- Identify potential roadblocks early
- Plan mitigation strategies
- Have contingency plans ready
- Monitor risks throughout execution

## üìä Example Planning Document

```markdown
# üéØ User Authentication System Planning

> Implement secure user authentication with JWT tokens and role-based access control

## üîç Current State

**What exists now:**
- Basic user registration form
- Simple password storage (insecure)
- No session management
- No role-based permissions

**Current limitations:**
- Passwords stored in plain text
- No authentication middleware
- Users can access all features without verification
- No password reset functionality

## üéØ Desired State

**What we want to achieve:**
- Secure JWT-based authentication
- Role-based access control (Admin, User, Guest)
- Password hashing with bcrypt
- Password reset via email
- Session management and logout
- Protected API endpoints

**Success indicators:**
- 100% of passwords are hashed
- All protected routes require valid JWT
- Role-based permissions working correctly
- Password reset emails sent successfully
```

## üö® Critical Rules

1. **ALWAYS research via web search before planning**
2. **ALWAYS collaborate with the prompter to clarify requirements**
3. **ALWAYS compare current vs desired states clearly**
4. **ALWAYS break down into actionable, specific tasks**
5. **ALWAYS include testing and validation phases**
6. **ALWAYS provide realistic time and size estimates**
7. **ALWAYS identify risks and mitigation strategies**
8. **ALWAYS define clear success criteria**
9. **ALWAYS include buffer time for unexpected issues**

---

**Remember**: Good planning documentation starts with thorough research and collaboration, then provides a clear roadmap from current reality to desired future state, with specific steps, realistic timelines, and clear success criteria that enable effective execution and validation.
