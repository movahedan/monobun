name: Main

on:
  # push:
  #   branches:
  #     - main
  workflow_run:
    workflows: ["Check"]
    types:
      - completed
    branches:
      - main

jobs:
  get-affected:
    name: 🔍 Get affected
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}
    outputs:
      affected-services: ${{ steps.affected-services.outputs.affected-services }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🚀 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.19

      - name: 🗃️ Cache Bun dependencies
        uses: actions/cache@v4
        id: bun-cache
        with:
          path: |
            ~/.bun/install/cache
            **/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: 📦 Install dependencies
        if: steps.bun-cache.outputs.cache-hit != 'true'
        run: bun install -E --no-save

      - name: 🔍 - Get affected services
        id: affected-services
        run: |
          echo "::group::🔍 Getting affected services"
          bun run scripts/ci-attach-affected.ts --mode docker --output-id affected-services
          echo "::endgroup::"

  build-affected:
    name: Build Affected
    needs: get-affected
    if: github.event.workflow_run.conclusion == 'success' && needs.get-affected.outputs.affected-services != ''
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🚀 Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2.19

      - name: 🗃️ Cache Bun dependencies
        uses: actions/cache@v4
        id: bun-cache
        with:
          path: |
            ~/.bun/install/cache
            **/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: 📦 Install dependencies
        if: steps.bun-cache.outputs.cache-hit != 'true'
        run: bun install -E --no-save

      - name: 🏗️ Build Packages
        run: |
          echo "::group::🏗️ Building Packages"
          bun run prod:build ${{ needs.get-affected.outputs.affected-services }}
          echo "::endgroup::"

      - name: 📋 - Display deployment info
        run: |
          echo "::group::📋 Deployment Summary"
          echo "Packages to deploy: ${{ needs.get-affected.outputs.affected-services }}"
          echo "::endgroup::"

      # - name: 🐳 Login to Docker Registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ secrets.DOCKER_REGISTRY }}
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: 🐳 Build and Push Docker Images
      #   run: |
      #     echo "::group::🐳 Building Docker Images"
      #     for pkg in ${{ needs.get-affected.outputs.affected-services }}; do
      #       if [ -f "$pkg/Dockerfile" ]; then
      #         echo "Building Docker image for $pkg..."
      #         docker build -t ${{ secrets.DOCKER_REGISTRY }}/$pkg:${{ github.sha }} -t ${{ secrets.DOCKER_REGISTRY }}/$pkg:latest $pkg
      #         docker push ${{ secrets.DOCKER_REGISTRY }}/$pkg:${{ github.sha }}
      #         docker push ${{ secrets.DOCKER_REGISTRY }}/$pkg:latest
      #       fi
      #     done
      #     echo "::endgroup::"

      # - name: 🚀 Deploy to Environment
      #   run: |
      #     echo "::group::🚀 Deploying Packages"
      #     for pkg in ${{ needs.get-affected.outputs.apps }}; do
      #       if [ -f "$pkg/Dockerfile" ]; then
      #         echo "Deploying $pkg..."
      #         # Add your deployment commands here
      #         # For example, if using Kubernetes:
      #         # kubectl set image deployment/$pkg $pkg=${{ secrets.DOCKER_REGISTRY }}/$pkg:${{ github.sha }}
      #         # kubectl rollout restart deployment/$pkg
      #       fi
      #     done
      #     echo "::endgroup::"
          