name: Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

jobs:
  validate-source:
    name: üîç Validate
    runs-on: ubuntu-latest
    env:
      TURBO_SCM_HEAD: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha || 'HEAD' }}
      TURBO_SCM_BASE: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || github.event.before || 'HEAD~1' }}
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ vars.TURBO_TEAM }}

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üöÄ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          no-cache: true
          bun-version: 1.2.19

      - name: üóÉÔ∏è Cache Bun dependencies
        uses: actions/cache@v4
        id: bun-cache
        with:
          path: |
            ~/.bun/install/cache
            **/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: üì¶ Install dependencies
        if: steps.bun-cache.outputs.cache-hit != 'true'
        run: bun install

      - name: üîç - Check branch name
        run: bun run scripts/ci-branchname.ts

      - name: ‚ú® - Biome check
        run: bun run check .

      - name: üîç - Get affected packages
        id: affected-packages
        run: |
          echo "::group::üîç Getting affected packages"
          bun run scripts/ci-attach-affected.ts --mode turbo --output-id affected-packages
          echo "::endgroup::"

      - name: üèóÔ∏è - Build packages
        run: bun run build ${{ steps.affected-packages.outputs.affected-packages }}

      - name: üîç - Type check
        run: bun run check:types ${{ steps.affected-packages.outputs.affected-packages }}

      - name: üß™ - Test
        run: bun test ${{ steps.affected-packages.outputs.affected-packages }}

      - name: üèóÔ∏è - Build
        run: bun run build ${{ steps.affected-packages.outputs.affected-packages }}


  validate-docker-compose:
    name: üê≥ Validate Docker Compose
    runs-on: ubuntu-latest
    env:
     TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
     TURBO_TEAM: ${{ vars.TURBO_TEAM }}

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üöÄ Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          no-cache: true
          bun-version: 1.2.19

      - name: üóÉÔ∏è Cache Bun dependencies
        uses: actions/cache@v4
        id: bun-cache
        with:
          path: |
            ~/.bun/install/cache
            **/node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-
  
      - name: üê≥ Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîç - Get affected services
        id: affected-services
        run: |
          echo "::group::üîç Getting affected services"
          bun run scripts/ci-attach-affected.ts --mode docker --output-id affected-services
          echo "::endgroup::"

      - name: üîç - Attach service ports to github output
        if: steps.affected-services.outputs.affected-services != ''
        id: ports
        run: |
          echo "::group::üîç Getting service ports"
          bun run scripts/ci-attach-service-ports.ts
          echo "::endgroup::"

      - name: üèóÔ∏è Test Production Build
        if: steps.affected-services.outputs.affected-services != ''
        run: |
          echo "::group::üèóÔ∏è Testing Production Build"

          if [ -z "${{ steps.affected-services.outputs.affected-services }}" ]; then
            echo "No affected services to test"
            exit 0
          fi

          # Build production images without cache to test build process
          bun run prod:compose build ${{ steps.affected-services.outputs.affected-services }} --no-cache --parallel
          if [ $? -ne 0 ]; then
            echo "‚ùå Production builds failed"
            exit 1
          fi
          
          echo "‚úÖ Production builds completed successfully"
          echo "::endgroup::"

      - name: üß™ Test Production Services
        if: steps.affected-services.outputs.affected-services != ''
        run: |
          echo "::group::üß™ Testing Production Services"
          
          # Check if we have any affected packages
          if [ -z "${{ steps.affected-services.outputs.affected-services }}" ]; then
            echo "No affected packages to test"
            exit 0
          fi
          
          # Start services in background
          bun run prod:compose up ${{ steps.affected-services.outputs.affected-services }} -d
          
          # Wait for services to start
          sleep 30
          
          # Check service status
          bun run prod:compose ps
          
          # Test service health (basic connectivity)
          for service in ${{ steps.affected-services.outputs.affected-services }}; do
            echo "Testing $service..."
            
            # Get port from the ports output - use proper jq syntax with quotes
            port=$(echo '${{ steps.ports.outputs.service-ports }}' | jq -r --arg service "$service" '.[$service] // empty' 2>/dev/null || echo "")
            
            if [ -n "$port" ] && [ "$port" != "null" ] && [ "$port" != "" ]; then
              echo "Service $service is accessible on port $port"
              # Test basic connectivity (don't fail if service doesn't respond, just log)
              curl -s --max-time 5 http://localhost:$port > /dev/null && echo "‚úÖ $service is responding" || echo "‚ö†Ô∏è $service is not responding (may be normal for some services)"
            else
              echo "‚ö†Ô∏è Service $service has no exposed port (may be a library package)"
            fi
          done

      - name: üßπ Cleanup
        if: always() && steps.affected-services.outputs.affected-services != ''
        run: |
          echo "::group::üßπ Cleaning up Docker resources"
          if [ -z "${{ steps.affected-services.outputs.affected-services }}" ]; then
            echo "No affected services to clean up"
            exit 0
          fi

          bun run prod:compose down ${{ steps.affected-services.outputs.affected-services }} --remove-orphans || true
          docker system prune -f || true
          echo "‚úÖ Cleanup completed"
          echo "::endgroup::"
